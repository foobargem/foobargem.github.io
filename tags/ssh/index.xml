<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssh on Life with Linux</title>
    <link>http://blog.foobargem.com/tags/ssh/</link>
    <description>Recent content in ssh on Life with Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Oct 2020 12:43:18 +0900</lastBuildDate>
    
	<atom:link href="http://blog.foobargem.com/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vault 를 사용한 TrustedUserCAKeys 기반 SSH 인증 구현</title>
      <link>http://blog.foobargem.com/posts/implementation-of-trustedusercakeys-with-using-vault/</link>
      <pubDate>Thu, 22 Oct 2020 12:43:18 +0900</pubDate>
      
      <guid>http://blog.foobargem.com/posts/implementation-of-trustedusercakeys-with-using-vault/</guid>
      <description>LDAP 또는 Kerberos 같은 통합인증(Single Sign-On)을 사용하지 않는 환경이라면 password 인증 또는 authorized_keys 인증을 주로 사용할 것이다.
팀 구성원에 변화(입사/퇴사)가 생기는 경우 password 를 변경하거나, 사용자의 public key 를 authorized_keys 에서 제거 또는 추가를 해야 한다. ansible 같은 도구를 통해 관리를 해 나갈수 있지만 쉽지만은 않다. 게다가 인프라가 지속적으로 늘어나기에 이상적으로 관리하는 것은 쉽지 않은것 같다.
그래서 보통은 private key 를 공유해서 사용하는 경우가 빈번한것 같다.
CA(Certificate Authority) 기반 인증 CA 서버를 통해서 각 사용자의 public key 에 대한 서명된 인증서를 발급받아 SSH 인증에 사용하는 방법이다.</description>
    </item>
    
  </channel>
</rss>