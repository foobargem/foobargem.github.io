<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Life with Linux</title>
    <link>http://blog.foobargem.com/categories/linux/</link>
    <description>Recent content in linux on Life with Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Oct 2020 12:43:18 +0900</lastBuildDate>
    
	<atom:link href="http://blog.foobargem.com/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vault 를 사용한 TrustedUserCAKeys 기반 SSH 인증 구현</title>
      <link>http://blog.foobargem.com/posts/implementation-of-trustedusercakeys-with-using-vault/</link>
      <pubDate>Thu, 22 Oct 2020 12:43:18 +0900</pubDate>
      
      <guid>http://blog.foobargem.com/posts/implementation-of-trustedusercakeys-with-using-vault/</guid>
      <description>LDAP 또는 Kerberos 같은 통합인증(Single Sign-On)을 사용하지 않는 환경이라면 password 인증 또는 authorized_keys 인증을 주로 사용할 것이다.
팀 구성원에 변화(입사/퇴사)가 생기는 경우 password 를 변경하거나, 사용자의 public key 를 authorized_keys 에서 제거 또는 추가를 해야 한다. ansible 같은 도구를 통해 관리를 해 나갈수 있지만 쉽지만은 않다. 게다가 인프라가 지속적으로 늘어나기에 이상적으로 관리하는 것은 쉽지 않은것 같다.
그래서 보통은 private key 를 공유해서 사용하는 경우가 빈번한것 같다.
CA(Certificate Authority) 기반 인증 CA 서버를 통해서 각 사용자의 public key 에 대한 서명된 인증서를 발급받아 SSH 인증에 사용하는 방법이다.</description>
    </item>
    
    <item>
      <title>RPi3로 wifi extender 만들기</title>
      <link>http://blog.foobargem.com/posts/make-a-wifi-extender-with-rpi3/</link>
      <pubDate>Mon, 01 Jun 2020 21:49:33 +0900</pubDate>
      
      <guid>http://blog.foobargem.com/posts/make-a-wifi-extender-with-rpi3/</guid>
      <description>굴러다니는 RPi3 를 활용해서 wifi extender (wifi 拡張ポイント)를 만들어 보았다. LAN cable 을 연장하기 싫어서 wireless nic 2개로 bridge 구성을 했다.
처음에는 단순하게 hostapd 를 사용하여 wlan1 을 ap 로 구성하고, br0(linux-bridge) 에 wlan0 를 추가해주면 끝날것으로 생각했다.
그러나 wlan0 를 br0 에 추가하면 아래와 같이 실패가 된다.
# brctl addif br0 wlan0 can&#39;t add wlan0 to bridge br0: Operation not supported  좋은 방법이 없을까 고민을 하다가 openvswitch 로 시도를 해보았다.</description>
    </item>
    
    <item>
      <title>v4.19 kernel 에서 xfs 의 barrier/nobarrier mount option 이 제거됨</title>
      <link>http://blog.foobargem.com/posts/removed-barrier-and-nobarrier-mount-option-of-xfs/</link>
      <pubDate>Tue, 31 Mar 2020 17:36:02 +0900</pubDate>
      
      <guid>http://blog.foobargem.com/posts/removed-barrier-and-nobarrier-mount-option-of-xfs/</guid>
      <description>kernel 변화에 따른 성능변화를 측정하기 위해서 CentOS 7.4 / 3.10.0-693.21.1.el7.x86_64 기반의 시스템에 elrepo 의 kernel(5.5.x) 을 설치하고 재부팅을 했다.
그런데, 오랜 시간이 지나도 ssh 접속이 되지 않았다. (beta 장비라서 OOB 구성이 안되어 있음) 어쩔수 없이 IDC 엔지니어에게 요청을 해서 다시 3.10.0-693.21.1.el7.x86_64 로 부팅을 했다.
동일 형상의 VM 을 가지고 elrepo 의 kernel 을 설치하고 console 화면을 확인해보니 부팅 중에 root filesystem 을 마운트 하지 못하여 maintenance mode 가 되어 있는게 원인이었다.</description>
    </item>
    
    <item>
      <title>데스크탑 PC 의 microcode update</title>
      <link>http://blog.foobargem.com/posts/microcode-update-on-desktop/</link>
      <pubDate>Thu, 23 Jan 2020 01:00:16 +0900</pubDate>
      
      <guid>http://blog.foobargem.com/posts/microcode-update-on-desktop/</guid>
      <description>kernel-5.4.13 빌드를 한뒤 부팅하고 dmesg 와 sysfs 를 확인해보니 역시나 새로운 intel cpu 취약점을 알려주고 있었다.
# dmesg | grep -i micro [ 0.172428] TAA: Vulnerable: Clear CPU buffers attempted, no microcode [ 0.172429] MDS: Vulnerable: Clear CPU buffers attempted, no microcode [ 6.553483] microcode: sig=0x506e3, pf=0x2, revision=0xc6 [ 6.553702] microcode: Microcode Update Driver: v2.2. # grep . /sys/devices/system/cpu/vulnerabilities/* /sys/devices/system/cpu/vulnerabilities/itlb_multihit:KVM: Mitigation: Split huge pages /sys/devices/system/cpu/vulnerabilities/l1tf:Mitigation: PTE Inversion; VMX: conditional cache flushes, SMT vulnerable /sys/devices/system/cpu/vulnerabilities/mds:Vulnerable: Clear CPU buffers attempted, no microcode; SMT vulnerable /sys/devices/system/cpu/vulnerabilities/meltdown:Mitigation: PTI /sys/devices/system/cpu/vulnerabilities/spec_store_bypass:Mitigation: Speculative Store Bypass disabled via prctl and seccomp /sys/devices/system/cpu/vulnerabilities/spectre_v1:Mitigation: usercopy/swapgs barriers and __user pointer sanitization /sys/devices/system/cpu/vulnerabilities/spectre_v2:Mitigation: Full generic retpoline, IBPB: conditional, IBRS_FW, STIBP: conditional, RSB filling /sys/devices/system/cpu/vulnerabilities/tsx_async_abort:Vulnerable: Clear CPU buffers attempted, no microcode; SMT vulnerable  microcode 를 업데이트 하면 일부는 완화될것으로 생각이 되어 업데이트를 시도!</description>
    </item>
    
    <item>
      <title>RHEL kernel 의 CPU model 검사</title>
      <link>http://blog.foobargem.com/posts/check-cpu-model-on-rhel-kernel/</link>
      <pubDate>Thu, 17 Oct 2019 01:28:11 +0900</pubDate>
      
      <guid>http://blog.foobargem.com/posts/check-cpu-model-on-rhel-kernel/</guid>
      <description>회사에서 RHEL7 을 사용하는 일부 시스템이 있다. 오늘 openvswitch 관련하여 kernel crash 가 일어나 재부팅이 발생을 했다. 관련해서 시스템을 진단하다가 생소한 메시지를 발견했고 RedHat 은 linux kernel 에 CPU model 검사를 한다는 것을 확인하게 되었다.
dmesg 의 일부 내용은 다음과 같다.
[ 0.000000] Warning: Intel CPU model - this hardware has not undergone testing by Red Hat and might not be certified. Please consult https://hardware.redhat.com for certified hardware.  메시지만 보아도 RedHat 이 커널에 무슨짓을 했을것 같은 느낌이다.</description>
    </item>
    
  </channel>
</rss>